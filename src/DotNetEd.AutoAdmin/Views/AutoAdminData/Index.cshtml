@using NonFactors.Mvc.Grid
@using System.Linq.Expressions
@model DotNetEd.AutoAdmin.ViewModels.DataListViewModel

@{
    ViewData["Title"] = Model.DbSetProperty.Name;
    Layout = "_AutoAdminLayout";
}

<h1 class="display-4">@Model.DbSetProperty.Name</h1>

@(Html
    .Grid(Model.Data)
    .Build((columns) => {

        foreach(var entityProperty in Model.EntityType.GetProperties())
        {
            

            ParameterExpression entity = Expression.Parameter(typeof(object), "ent");
            var changedType = Expression.Convert(entity, Model.EntityType);
            var property = Expression.Property(changedType, entityProperty.Name);

            if (entityProperty.PropertyType == typeof(Guid))
            {
                var returnTarget = Expression.Label(typeof(Guid));
                var lambda = Expression.Lambda<Func<object,Guid>>(property, entity);

                columns.Add(lambda).Titled(entityProperty.Name);
            } 
            else if (entityProperty.PropertyType == typeof(string))
            {
                var returnTarget = Expression.Label(typeof(string));
                var lambda = Expression.Lambda<Func<object,string>>(property, entity);

                columns.Add(lambda).Titled(entityProperty.Name);
            } 
            else if (entityProperty.PropertyType == typeof(Int32))
            {
                var returnTarget = Expression.Label(typeof(Int32));
                var lambda = Expression.Lambda<Func<object,Int32>>(property, entity);

                columns.Add(lambda).Titled(entityProperty.Name);
            }
            else if (entityProperty.PropertyType == typeof(DateTime))
            {
                var returnTarget = Expression.Label(typeof(DateTime));
                var lambda = Expression.Lambda<Func<object,DateTime>>(property, entity);

                columns.Add(lambda).Titled(entityProperty.Name);
            }

        }

        //Expression keyValue = Expression.Invoke(this.pkFieldExpression, entity);
        //Expression pkValue = Expression.Constant(Pk, keyValue.Type);
        //Expression body = Expression.Equal(keyValue, pkValue);
        //var expression = Expression.Lambda<Func<TEntity, bool>>(body, entity);

      

       // columns.Add(model => Expression.Lambda(
       //         Expression.Property(
       //             Expression.Parameter(Model.EntityType), Model.EntityType.GetProperty("Id")), 
       //             Expression.Parameter(Model.EntityType)).Compile());
        //.Titled("Id");
        // columns.Add(model => Expression.Invoke());
       

        }
        
        )
    .Using(GridFilterMode.Header)
    .Empty("No data found")
    .Filterable()
    .Sortable()
    .Pageable()
)

@section Scripts
{
     <script>
           document.querySelectorAll(".mvc-grid").forEach(element => new MvcGrid(element));
        </script>
}

@* 
<table class="table table-striped table-sm">
    <thead>
        <tr>
            @foreach (var entityProperty in Model.EntityType.GetProperties())
            {
                <th>@entityProperty.Name</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Data)
        {
            <tr>
                @foreach (var entityProperty in Model.EntityType.GetProperties())
                {
                    <td>@entityProperty.GetValue(item)</td>
                }
            </tr>
        }
    </tbody>
</table> *@